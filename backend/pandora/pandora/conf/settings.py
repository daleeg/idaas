"""
Django settings for pandora project.

Generated by "django-admin startproject" using Django 3.0.3

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
# import django_registration
import os
import sys
from corsheaders.defaults import default_headers
from pathlib import Path
from drf_yasg import openapi

BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '%_jo6=3g8xj-uc+b$hm*k8el_^!agaq&)xfcypgd%ji#8nu@xr'

# SECURITY WARNING: don"t run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "YES").lower() in ("on", "true", "y", "yes")

ALLOWED_HOSTS = []
AUTH_USER_MODEL = "pandora.User"
SILK = False
# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "rest_framework",
    "rest_framework.authtoken",
    "django_filters",
    "rest_framework_swagger",
    "corsheaders",
    "django_mysql",
    "drf_yasg",
    "pandora",
    # "debug_toolbar.apps.DebugToolbarConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    # "django.middleware.locale.LocaleMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    # "django_cas_ng.middleware.CASMiddleware",
    "pandora.core.middleware.CompanyMiddleware",
    "pandora.core.middleware.ConditionalEtagCacheMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

if SILK:
    INSTALLED_APPS += ["silk"]
    MIDDLEWARE += ["silk.middleware.SilkyMiddleware"]
SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = (
    "GET",
    "POST",
    "PUT",
    "PATCH",
    "DELETE",
    "OPTIONS"
)
COMPANY_HEADER = "X_CUSTOM_HEADER_JDCOMPANY"
COMPANY_HEADER_LOWER = "X-Custom-Header-JDCompany"

APP_HEADER = "X_CUSTOM_HEADER_JDAPP"
APP_HEADER_LOWER = "X-Custom-Header-JDApp"

CORS_ALLOW_HEADERS = default_headers + (
    COMPANY_HEADER_LOWER,
    APP_HEADER_LOWER,
)
CORS_EXPOSE_HEADERS = (
    COMPANY_HEADER,
    APP_HEADER,
)
SESSION_SAVE_EVERY_REQUEST = False
SESSION_COOKIE_AGE = 60 * 60 * 24
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
ROOT_URLCONF = "pandora.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates"), ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            "libraries": {
                "staticfiles": "django.templatetags.static",
            },
        },

    },
]
WSGI_APPLICATION = "pandora.wsgi.application"
# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
PANDORA_VERSION = "v2"
REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": (
        "rest_framework.renderers.JSONRenderer",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.AllowAny",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.BasicAuthentication",
        "pandora.core.authentication.SessionAuthentication",
        "pandora.core.authentication.ExpiringTokenAuthentication",
    ),
    "DEFAULT_FILTER_BACKENDS": ("pandora.core.filter.APIDjangoFilterBackend",
                                "pandora.core.filter.APISearchFilter"),
    "DEFAULT_PAGINATION_CLASS": "pandora.core.pagination.APIPageNumberPagination",
    "DEFAULT_SCHEMA_CLASS": "pandora.core.schema.ManualViewSchema",
    # Filtering
    "SEARCH_PARAM": "search",
    "ORDERING_PARAM": "ordering",
    "PAGE_SIZE": 50,
    "EXCEPTION_HANDLER": "pandora.core.handler.exception_handler",
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",
    "DEFAULT_VERSION": PANDORA_VERSION,
    "ALLOWED_VERSIONS": [PANDORA_VERSION],
    "VERSION_PARAM": "version"
}
REST_FRAMEWORK_TOKEN_EXPIRE_MINUTES = 60
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    # "django_cas_ng.backends.CASBackend",
]
DATABASES = {
    # "default": {
    #     "ENGINE": "django.db.backends.sqlite3",
    #     "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
    # },
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": os.environ.get("DB_NAME", "pandora"),
        "USER": os.environ.get("DB_USER", "root"),
        "PASSWORD": os.environ.get("DB_PASS", "pandora"),
        "HOST": os.environ.get("DB_SERVICE", "127.0.0.1"),
        # "HOST": os.environ.get("DB_SERVICE", "121.40.125.115"),
        "PORT": int(os.environ.get("DB_PORT", 13306)),
        "OPTIONS": {
            "read_default_file": os.path.join(BASE_DIR, "conf", "mysql_client.conf"),
            "charset": "utf8mb4",
        },
    }
}

API_CACHE_ON = os.getenv("API_CACHE", "TRUE").lower() in ("on", "true", "y", "yes")
API_CACHE_REDIS = "api_cache"
# The cache backends to use.
CACHES = {
    "pandora_key_value": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "pandora_key_value",
    },
    "default": {
        "BACKEND": "redis_lock.django_cache.RedisCache",
        "LOCATION": "redis://{}:{}/1".format(os.environ.get("REDIS_HOST", "127.0.0.1"),
                                             int(os.environ.get("REDIS_PORT", 16379))),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
    "lru_cache": {
        "BACKEND": "redis_lock.django_cache.RedisCache",
        "LOCATION": "redis://{}:{}/2".format(os.environ.get("REDIS_HOST", "127.0.0.1"),
                                             int(os.environ.get("REDIS_PORT", 16379))),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
    "pub_sub": {
        "BACKEND": "redis_lock.django_cache.RedisCache",
        "LOCATION": "redis://{}:{}/3".format(os.environ.get("REDIS_HOST", "127.0.0.1"),
                                             int(os.environ.get("REDIS_PORT", 16379))),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
    "distributed_lock": {
        "BACKEND": "redis_lock.django_cache.RedisCache",
        "LOCATION": "redis://{}:{}/4".format(os.environ.get("REDIS_HOST", "127.0.0.1"),
                                             int(os.environ.get("REDIS_PORT", 16379))),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
    "queue": {
        "BACKEND": "redis_lock.django_cache.RedisCache",
        "LOCATION": "redis://{}:{}/5".format(os.environ.get("REDIS_HOST", "127.0.0.1"),
                                             int(os.environ.get("REDIS_PORT", 16379))),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
    API_CACHE_REDIS: {
        "BACKEND": "redis_lock.django_cache.RedisCache",
        "LOCATION": "redis://{}:{}/6".format(os.environ.get("REDIS_HOST", "127.0.0.1"),
                                             int(os.environ.get("REDIS_PORT", 16379))),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
}
# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]
SWAGGER_SETTINGS = {
    "DEFAULT_GENERATOR_CLASS": "pandora.core.schema.OpenAPISchemaGenerator",
    "DEFAULT_AUTO_SCHEMA_CLASS": "pandora.core.schema.ManualSwaggerAutoSchema",
    "DEFAULT_FILTER_INSPECTORS": [
        "pandora.core.schema.inspector.OpenAPIFilterInspector",
    ],
    "DEFAULT_PAGINATOR_INSPECTORS": [
        "pandora.core.schema.inspector.APIRestResponsePagination",
    ],
    "DEFAULT_INFO": openapi.Info(
        title="IDAAS API",
        default_version="v1",
        description="IDAAS API doc",
        terms_of_service="",
        contact=openapi.Contact(name="JDSK Group", email="service@jd.com"),
        license=openapi.License(name="BSD License"),
    ),
    "USE_SESSION_AUTH": False,
    "SHOW_COMMON_EXTENSIONS": True,
    "DOC_EXPANSION": "none",  # none , list, full
    "SHOW_EXTENSIONS": True,
    "OPERATIONS_SORTER": "alpha",
    "TAGS_SORTER": "alpha",
    "DEFAULT_MODEL_DEPTH": 3,
    "DEFAULT_MODEL_RENDERING": "example",
    "SUPPORTED_SUBMIT_METHODS": [
        "get",
        "post",
        "put",
        "delete",
    ],
}

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
PANDORA_PRE = "/"

STATIC_URL = os.path.join(PANDORA_PRE, "static/")
FILE_URL = os.path.join(PANDORA_PRE, "file/")
UPGRADE_URL = os.path.join(PANDORA_PRE, "upgrade/")
if sys.platform == "win32":
    FILE_ROOT = os.path.join(BASE_DIR, "file")
    UPGRADE_ROOT = os.path.join(BASE_DIR, "upgrade")
    STATIC_ROOT = os.path.join(BASE_DIR, "static")
else:
    FILE_ROOT = "/file/"
    UPGRADE_ROOT = "/upgrade/"
    STATIC_ROOT = "/static/"

SITE_ID = 1
APPEND_SLASH = False
ALLOWED_HOSTS = ["*"]
if sys.platform == "win32":
    LOG_PATH = os.path.join(BASE_DIR, os.pardir)
    PID_FILE_PATH = os.path.join(BASE_DIR, "/pandora/PID")

else:
    LOG_PATH = "/var/log/cornerstone/idaas"
    PID_FILE_PATH = "/pandora/PID"
    os.makedirs(LOG_PATH, exist_ok=True)

POD = os.environ.get("POD_NAME")

if POD:
    DB_LOG_NAME = "db_{}.log".format(POD)
    GENERAL_LOG_NAME = "pandora_{}.log".format(POD)
    URL_LOG_NAME = "pandora_url_{}.log".format(POD)

else:
    DB_LOG_NAME = "db.log"
    GENERAL_LOG_NAME = "pandora.log"
    URL_LOG_NAME = "pandora_url.log"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
    },
    "formatters": {
        "verbose": {
            "format": "[%(levelname)s] %(asctime)s.%(msecs).3d %(filename)s(%(lineno)s)/%(funcName)s : %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S"
        },
        "simple": {
            "format": "[%(levelname)s] %(asctime)s.%(msecs).3d : %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S"
        },
        "gather": {
            "format": "[%(asctime)s.%(msecs).3d]: %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S"
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
        },
        "db": {
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(LOG_PATH, DB_LOG_NAME),
            "maxBytes": 100 * 1024 * 1024,  # 100M
            "backupCount": 4,
            "formatter": "verbose",
        },
        "general": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(LOG_PATH, GENERAL_LOG_NAME),
            "maxBytes": 100 * 1024 * 1024,  # 100M
            "backupCount": 4,
            "formatter": "verbose",
        },
        "url": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "formatter": "simple",
            "filename": os.path.join(LOG_PATH, URL_LOG_NAME),
            "maxBytes": 100 * 1024 * 1024,  # 10M
            "backupCount": 2,
        },
    },
    "loggers": {
        "": {
            "handlers": ["general", ],
            "level": "INFO",
        },
        "django.db.backends": {
            "level": "DEBUG" if DEBUG else "ERROR",
            "handlers": ["db"],
            "propagate": False,
        },
        "django.request": {
            "handlers": ["general"],
            "level": "ERROR",
            "propagate": False,
        },
        "django.server": {
            "handlers": ["general", "console"],
            "level": "INFO",
            "propagate": False,
        },
        "pandora.core.handler": {
            "handlers": ["url"],
            "level": "INFO",
            "propagate": False
        },
    }
}


DATA_UPLOAD_MAX_NUMBER_FIELDS = None
FILE_UPLOAD_MAX_MEMORY_SIZE = 314572800


PANDORA_API = os.path.join(PANDORA_PRE, "api/")


ACCOUNT_ACTIVATION_DAYS = 1
CACHE_DEPENDENCY_MAPPING = "pandora.business.dependents"

USER_DEFAULT_PASSWORD = os.getenv("USER_DEFAULT_PASSWORD", "888888")

